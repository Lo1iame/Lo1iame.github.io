<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue 消息总线(Bus)功能的实现</title>
    <link href="undefinedarchives/8e1dce17.html"/>
    <url>archives/8e1dce17.html</url>
    
    <content type="html"><![CDATA[<h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><p>Vue开发中，我们经常遇到需要组件间传值的情景</p><h4 id="父组件传给子组件"><a href="#父组件传给子组件" class="headerlink" title="父组件传给子组件"></a>父组件传给子组件</h4><p>在传统的实现方式中，父组件传递给子组件使用<code>Prop</code></p><pre><code class="vue">&lt;!-- 父组件 --&gt;&lt;child msg=&quot;来自父组件的值&quot;&gt;&lt;/child&gt;</code></pre><pre><code class="js">// 子组件props: {    msg: String,}// TypeScript@prop() msg: string</code></pre><h4 id="子组件传给父组件"><a href="#子组件传给父组件" class="headerlink" title="子组件传给父组件"></a>子组件传给父组件</h4><p>子组件传递给父组件使用<code>emit</code></p><pre><code class="vue">&lt;!-- 父组件 --&gt;&lt;!-- 监听子组件的sendMsg事件 --&gt;&lt;child @sendMsg=&quot;getMsg&quot;&gt;&lt;/child&gt;</code></pre><pre><code class="js">// 父组件// 响应事件函数getMsg(msg) {    console.log(msg)}</code></pre><pre><code class="js">// 子组件this.$emit(&#39;sendMsg&#39;, &#39;传给父组件的消息&#39;)</code></pre><h3 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h3><p>如果我们遇到兄弟组件，或者沾不上什么亲的随便两个组件需要互相响应，可以通过 <strong>消息总线(Bus)</strong> 来实现。</p><h4 id="消息总线的原理"><a href="#消息总线的原理" class="headerlink" title="消息总线的原理"></a>消息总线的原理</h4><p>Vue实例中有<code>$on()</code>和<code>$emit()</code>方法，我们可以用一个新的Vue实例作为消息总线，让它集中管理消息的发送和接收响应。</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>TypeScript</p><pre><code class="ts">// Bus.tsimport Vue from &#39;vue&#39;;/** * @class 消息总线 */export class Bus {    // 消息处理者    private handler = new Vue;    /**      * @description 传出消息     * @param event 消息文本     * @param preload 载荷     */    $emit(event: string, preload?: any): void {        this.handler.$emit(event, preload);    }    /**      * @description 响应消息     * @param event 消息文本     * @param handle 响应消息回调函数     */    $on(event: string, handle: Function): void{        this.handler.$off(event);   // 先解绑原有的事件，防止多次执行回调        this.handler.$on(event, handle);    }}</code></pre><p>JavaScript 按此逻辑封装即可</p><p>Bus类有一个处理器<code>handler</code>，是一个新的Vue实例，同时有两个方法<code>$on()</code>和<code>$emit()</code>，负责响应消息和传出消息</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre><code class="ts">// main.tsimport { Bus } from &#39;./bus/Bus&#39;;Vue.prototype.$bus = new Bus;</code></pre><pre><code class="ts">// 组件Athis.$bus.$emit(&#39;event name&#39;, &#39;消息内容&#39;);</code></pre><pre><code class="ts">// 组件Bthis.$bus.$on(&#39;event name&#39;, (msg)=&gt; {    console.log(msg); // 消息内容})</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>企业微信第三方服务商应用开发</title>
    <link href="undefinedarchives/be1a3ce8.html"/>
    <url>archives/be1a3ce8.html</url>
    
    <content type="html"><![CDATA[<p>最近公司要做OA平台，要搞企业微信的第三方应用，现在正在踩坑中</p><p>等待更新<br>……</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
      <tag>微信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>酷Q SDK-X + Python + Flask 开发聊天机器人</title>
    <link href="undefinedarchives/93aba733.html"/>
    <url>archives/93aba733.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近加了一个碧蓝航线的游戏群，看到群里有个聊天机器人，你每天都可以艾特它抽卡，和它说你要抽哪个池子它就会随机给你发一个抽卡结果的图片，于是一个死宅程序员的本能就觉醒了，这玩意是怎么做的呢？</p><a id="more"></a><p>于是我去网上调研了一些技术，幻想着是不是可以用一个Web API就能往QQ群推送消息，结果居然没有 <del>(废话)</del> ，但至少发现了一个叫<a href="https://cqp.cc/" target="_blank" rel="noopener">酷Q</a>的软件，它经常使用易语言去编写聊天插件，有比较成熟的社区，对<a href="http://www.turingapi.com/" target="_blank" rel="noopener">图灵机器人</a>有比较好的支持，所以我决定用编写酷Q的插件的方式来完成我<span style="color: #000;background-color: #000">对机器人老婆</span>的需求</p><h3 id="那就开始吧"><a href="#那就开始吧" class="headerlink" title="那就开始吧"></a>那就开始吧</h3><p>虽然说了要做一个酷Q的插件，但我并不想写易语言，酷Q支持使用python开发，本篇文章就使用python实现</p><p>为了不让本篇文章频繁出现<strong>机器人</strong>的字眼，使得阅读更富有人情，我们在下文将其称呼为<strong>心酱</strong></p><p><span style="color: #000;background-color: #000">哈恰玛恰玛~（心豚叫声）</span></p><p>我们这个应用程序的思路是这样的：</p><ol><li><p>使用心酱的账号登录酷Q，把她加为好友，或让她潜伏在群里</p></li><li><p>酷Q插件运行中会监听私聊和群消息等，根据不同的消息和事件触发不同的处理逻辑</p></li><li><p>让某些特定的命令去调用服务端API获取需要回复的内容，再通过酷Q的API推送到群里</p></li></ol><h3 id="第一步：安装酷Q-SDK-X"><a href="#第一步：安装酷Q-SDK-X" class="headerlink" title="第一步：安装酷Q SDK-X"></a>第一步：安装酷Q SDK-X</h3><p>酷Q常用的有两种版本，分别是 <strong>酷Q Air</strong> 和 <strong>酷Q Pro</strong> ， 区别是Air版免费，Pro版收费，但Air版缺少一些Pro版支持的功能，其中影响比较大的是Air版不能发送图片。<br>于是，博主掂量了一下自己的钱包决定用Air版<span style="color: #000;background-color: #000">（你氪游戏的时候怎么不掂量掂量喂！）</span></p><p>下载地址和安装教程可以参考<a href="https://gitee.com/muxiaofei/coolq_sdk_x/wikis/pages?sort_id=1415025&doc_id=287242" target="_blank" rel="noopener"><strong>官方文档</strong></a></p><p>安装完成后，使用准备好的心酱账号登录，在酷Q的应用列表启用你的插件，如果可以启用成功，则环境配置正确</p><p><em>安装常见问题：</em></p><ul><li><p>如果你发现下载地址点进去什么都没有，你需要先注册一个论坛账号才能看见帖子</p></li><li><p>Python一定要使用32位或者支持32位，否则会加载SDK失败进而导致RPC调用失败</p></li><li><p>如果DLL一直加载失败，检查下Visual C++ 运行时组件是否漏装</p></li><li><p>重载应用时如果提示开发文件目录更变，一定要选是，但我们开发仍在app目录下进行</p></li><li><p>其他问题参考文档一般都可解决</p></li></ul><h3 id="第二步：如何使用"><a href="#第二步：如何使用" class="headerlink" title="第二步：如何使用"></a>第二步：如何使用</h3><p>我们跟着教程配置了<code>CQPlusHandler.py</code>文件</p><pre><code class="python"># -*- coding:utf-8 -*-import cqplusclass MainHandler(cqplus.CQPlusHandler):    def handle_event(self, event, params):        self.logging.debug(&quot;hello world&quot;)</code></pre><p><code>CQPlusHandler.py</code> 会在每次接收到消息或计时器循环时被调用一次，这是通过酷Q的SDK去调用的，并不需要手动运行该文件，因此你也无法使用<code>print()</code>去调试应用，只能使用<code>self.logging.debug()</code>或<code>self.logging.info()</code>输出到酷Q的日志中调试</p><p>将心酱拉进你的群里，或者与她对话，可以在酷Q的日志里面看到记录</p><p>如果在日志中看到了代码中写的”hello world”，那就运行成功啦</p><p><img src="https://ypcdn.105577.xyz/d76906c3e385518afe58818ead2df8b3.png" srcset="/img/loading.gif" alt="alt 日志"></p><h3 id="第三步：处理事件"><a href="#第三步：处理事件" class="headerlink" title="第三步：处理事件"></a>第三步：处理事件</h3><p>此时我们已经解决了监听QQ消息并调用python这个最核心的问题，剩下的都是自由发挥了</p><p>我们可以选择处理很多种消息事件，具体的事件列表和对应参数在官方文档有说明</p><p>大体的结构如下：</p><h5 id="CQPlusHandler-py"><a href="#CQPlusHandler-py" class="headerlink" title="CQPlusHandler.py"></a>CQPlusHandler.py</h5><pre><code class="python"># -*- coding:utf-8 -*-import cqplus# 心酱的QQ号AI_QQ = &#39;xxxxxxxxxx&#39;class MainHandler(cqplus.CQPlusHandler):    def handle_event(self, event, params):        # 收到群消息        if event == &#39;on_group_msg&#39;:            qq = params[&#39;from_qq&#39;]            # 帮助            if params[&#39;msg&#39;] == &#39;[CQ:at,qq={}] help&#39;.format(AI_QQ):                msg = &#39;指令说明：xxxx&#39;                self.api.send_group_msg(params[&#39;from_group&#39;], msg)        # 定时器        if event == &#39;on_timer&#39;:            # 每日问候            if params[&#39;name&#39;] == &#39;push&#39;:                # 推送一些消息</code></pre><h4 id="CQ码"><a href="#CQ码" class="headerlink" title="CQ码"></a>CQ码</h4><p><code>[CQ:at, qq=xxx]</code>是CQ码，该CQ码<code>CQ:at</code>代表的是被@，后面的参数<code>qq=xxx</code>代表了消息中被@的QQ号，这段代码表示了如果收到<code>&quot;@心酱 help&quot;</code>，则向该群发送指令说明</p><p><code>self.api.send_group_msg(群QQ号, 消息内容)</code> 可以让当前登录酷Q的账号向指定群里发送消息，消息内容里也支持使用CQ码</p><p>向群里或者向某个QQ号发送消息，以及获取群成员列表，撤销、禁言、分享内容等操作都可以使用<code>cqplus.CQPlusHandler</code>的api来实现</p><p>更多的api指令可以转到<code>cqplus.CQPlusHandler</code>的定义在源码中查看</p><p>更多的CQ码查阅该文档：<a href="https://docs.cqp.im/manual/cqcode/" target="_blank" rel="noopener">酷Q文库</a></p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p>上面的定时器事件中，<code>name</code>参数来自于<code>settings.json</code>，这里一定不要被教程坑了，教程中让你设置了两个计时器</p><h5 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h5><pre><code class="json">{    &quot;DEBUG&quot;: true,    &quot;TIMER&quot;: {        &quot;timer01&quot;: 3000,        &quot;timer02&quot;: 5000    },    &quot;RUNTIME_NAME&quot;: &quot;Python37&quot;}</code></pre><p><code>timer01</code> 每3s执行一次，<code>time02</code> 每5s执行一次，频繁调用使得程序容易崩溃，这里如果没有需求的话建议删除计时器，或使计时器频率不要超过5分钟</p><pre><code class="json">{    &quot;DEBUG&quot;: true,    &quot;TIMER&quot;: {        &quot;push&quot;: 300000    },    &quot;RUNTIME_NAME&quot;: &quot;Python37&quot;}</code></pre><p>本例中使用了一个推送计时器，每5分钟检查一下当前所在的时间，并在某些特定时间内向群里推送消息。</p><p class="note note-danger">酷Q社区并不提倡自动推送功能，不仅程序容易崩溃，而且会容易被用来制造广告和诈骗信息，请各位开发者自觉遵守法律法规，禁止使用此软件从事网络违法犯罪行为</p><h3 id="第四步：接入图灵机器人"><a href="#第四步：接入图灵机器人" class="headerlink" title="第四步：接入图灵机器人"></a>第四步：接入图灵机器人</h3><p>我们现在可以处理消息并返回内容了，但内容如果全部写死就没有意义了，无论如何，得让心酱能先和我们对话才行</p><p>我们可以选择接入图灵机器人的API，实现对话功能</p><p><a href="http://www.turingapi.com" target="_blank" rel="noopener">图灵机器人官网</a></p><h5 id="创建机器人"><a href="#创建机器人" class="headerlink" title="创建机器人"></a>创建机器人</h5><p>进入官网，在机器人管理页面创建一个心酱</p><p><img src="https://ypcdn.105577.xyz/e8a7a2cb9528ba7528e4e249ce901050.png" srcset="/img/loading.gif" alt="alt 心酱"></p><h4 id="接入API"><a href="#接入API" class="headerlink" title="接入API"></a>接入API</h4><p><a href="https://www.kancloud.cn/turing/www-tuling123-com/718227" target="_blank" rel="noopener">图灵机器人API V2.0接入文档</a></p><p>可以参考接入文档，在获取消息后调用，或使用自己的服务端转发，博主是使用了基于Python Flask的服务端对接并为酷Q脚本提供API</p><h5 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h5><pre><code class="python"># 和心酱聊天@app.route(&#39;/chatAI&#39;, methods=[&#39;POST&#39;])def chatAI():    text = request.form[&#39;text&#39;]    user = request.form[&#39;user&#39;]    params = {        &quot;reqType&quot;:0,        &quot;perception&quot;: {            &quot;inputText&quot;: {                &quot;text&quot;: text            }        },        &quot;userInfo&quot;: {            &quot;apiKey&quot;: &quot;心酱的apikey&quot;,            &quot;userId&quot;: user        }    }    response = requests.post(&#39;http://openapi.tuling123.com/openapi/api/v2&#39;,data=json.dumps(params))    result = response.json()    result_json = {        &#39;code&#39;: 1,        &#39;text&#39;: result[&#39;results&#39;][0][&#39;values&#39;][&#39;text&#39;]    }    return jsonify(result_json)</code></pre><p>在机器人设置页中可以看到属于心酱的<code>apikey</code>，注意不要开启密钥，会导致接口调用失败</p><p>我们在客户端新建一个<code>Api.py</code>用于管理请求，并在<code>CQPlusHandler.py</code>中调用它</p><h5 id="Api-py"><a href="#Api-py" class="headerlink" title="Api.py"></a>Api.py</h5><pre><code class="python">import requestsBASE_API = &#39;你的服务器地址&#39;# 和心酱聊天def chatWithAI(msg, user):    data = {        &#39;text&#39;: msg,        &#39;user&#39;: user    }    res = requests.post(BASE_API+&#39;/chatAI&#39;, data=data)    result = res.json()    return result</code></pre><h5 id="CQPlusHandler-py-1"><a href="#CQPlusHandler-py-1" class="headerlink" title="CQPlusHandler.py"></a>CQPlusHandler.py</h5><pre><code class="python"># -*- coding:utf-8 -*-import cqplusimport Api# 心酱的QQ号AI_QQ = &#39;xxxxxxxxxx&#39;class MainHandler(cqplus.CQPlusHandler):    def handle_event(self, event, params):        # 收到群消息        if event == &#39;on_group_msg&#39;:            qq = params[&#39;from_qq&#39;]            # 帮助            if params[&#39;msg&#39;] == &#39;[CQ:at,qq={}] help&#39;.format(AI_QQ):                msg = &#39;指令说明：xxxx&#39;                self.api.send_group_msg(params[&#39;from_group&#39;], msg)            # 其他艾特心酱的内容视为闲聊            elif &#39;[CQ:at,qq={}]&#39;.format(AI_QQ) in params[&#39;msg&#39;]:                result = Api.chatWithAI(msg=params[&#39;msg&#39;], user=qq)                self.api.send_group_msg(params[&#39;from_group&#39;], &#39;[CQ:at,qq={}] &#39;.format(qq) + result[&#39;text&#39;])</code></pre><p>此时在群里<code>@心酱</code>并附带任意消息，心酱就会和你聊天啦</p><h3 id="再举一个例子：推送B站订阅"><a href="#再举一个例子：推送B站订阅" class="headerlink" title="再举一个例子：推送B站订阅"></a>再举一个例子：推送B站订阅</h3><p>接入B站API，实现每天21:00自动推送该群订阅的up主新投稿视频</p><p>实现之前，我先脑补了一下我要做的操作</p><p><code>@心酱 bilibili 订阅 [aid] [自定义名称(可选)]</code> 订阅一个up</p><p>使用： @心酱 bilibili 订阅 339567211 赤井心Official</p><p><code>@心酱 bilibili 退订 [aid]</code> 退订一个up</p><p>使用： @心酱 bilibili 退订 339567211</p><p><code>@心酱 bilibili 订阅状态</code> 查看该群订阅的up列表</p><p><code>@心酱 bilibili 开启</code> 开启该群每日推送</p><p><code>@心酱 bilibili 关闭</code> 关闭该群每日推送</p><p><code>@心酱 bilibili</code> 立即推送更新（与每日推送不冲突）</p><p>想了想好像逻辑齐全了，于是实现代码如下，因为太多了，只做简略的描述</p><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><h5 id="app-py-1"><a href="#app-py-1" class="headerlink" title="app.py"></a>app.py</h5><pre><code class="python"># 心酱:获得B站up更新@app.route(&#39;/getBiliBiliUpdate/&lt;group&gt;/&lt;aid&gt;&#39;, methods=[&#39;GET&#39;])def getBiliBiliUpdate(group, aid):    upInfo = Heart.getUpInfo(group, aid)    if upInfo == None:        return jsonify({&#39;code&#39;: 0, &#39;data&#39;: None})    return jsonify({&#39;code&#39;: 1, &#39;data&#39;: upInfo})# 心酱:获得当前群关注的up列表@app.route(&#39;/getGroupUp/&lt;group&gt;&#39;, methods=[&#39;GET&#39;])def getGroupUp(group):    code = 1    upInfo = Heart.getGroupUp(group)    if upInfo == None:        code = 0    return jsonify({&#39;code&#39;: code, &#39;data&#39;: upInfo})# 心酱:添加一条up订阅到指定群@app.route(&#39;/bindGroupUp&#39;, methods=[&#39;POST&#39;])def bindGroupUp():    group = request.form[&#39;group&#39;]    aid = request.form[&#39;aid&#39;]    name = request.form[&#39;name&#39;]    code = Heart.bindGroupUp(group, aid, name)    return jsonify({&#39;code&#39;: code})# 心酱:删除一条up订阅到指定群@app.route(&#39;/deleteGroupUp&#39;, methods=[&#39;POST&#39;])def deleteGroupUp():    group = request.form[&#39;group&#39;]    aid = request.form[&#39;aid&#39;]    code = Heart.deleteGroupUp(group, aid)    return jsonify({&#39;code&#39;: code})# 心酱:设置订阅开启/关闭@app.route(&#39;/setBiliBiliOpen/&lt;group&gt;/&lt;state&gt;&#39;, methods=[&#39;GET&#39;])def setBiliBiliOpen(group, state):    Heart.setBiliBiliOpen(group, state)    return jsonify({&#39;code&#39;: 1})</code></pre><h5 id="Heart-py"><a href="#Heart-py" class="headerlink" title="Heart.py"></a>Heart.py</h5><pre><code class="python">from pymongo import MongoClient# 连接mongodbclient = MongoClient(&#39;0.0.0.0&#39;,27017)Heart = client.HeartVtb = Heart.vtb# 获取B站UP的主页信息def getUpInfo(group, aid):    follow = Vtb.find_one({&#39;group&#39;: group})    if follow == None:        return None    ups = follow[&#39;up&#39;]    up = None    for _up in ups:        if _up[&#39;aid&#39;] == aid:            up = _up    if up == None:        return None    res = requests.get(&#39;https://api.bilibili.com/x/space/arc/search?mid=&#39; + aid + &#39;&amp;ps=30&amp;tid=0&amp;pn=1&amp;keyword=&amp;order=pubdate&amp;jsonp=jsonp&#39;).json()    nowCount = res[&#39;data&#39;][&#39;page&#39;][&#39;count&#39;]    newVideos = []  # 新上传视频列表    maxSize = 3     # 最多获取多少条新视频    over = 0    # 超出多少条新视频没获取到    # 如果视频总数大于数据库记录，则说明有更新    if nowCount &gt; up[&#39;count&#39;]:        vlist = res[&#39;data&#39;][&#39;list&#39;][&#39;vlist&#39;]        size = nowCount - up[&#39;count&#39;]        if size &gt; 3:            over = size - 3            size = 3        newVideos = vlist[:size]    # 更新数据库与最新视频数量一致    for _up in ups:        if _up[&#39;aid&#39;] == aid:            _up[&#39;count&#39;] = nowCount    follow[&#39;up&#39;] = ups    Vtb.update({&#39;group&#39;: group}, follow)    return {&#39;videos&#39;: newVideos, &#39;over&#39;: over}# 添加一条up订阅到指定群def bindGroupUp(group, aid, name=&#39;&#39;):    condition = {&#39;group&#39;: group}    setting = Vtb.find_one(condition)    up = {        &#39;aid&#39;: aid,        &#39;name&#39;: name,        &#39;count&#39;: 0    }    if setting == None:        newSetting = {            &#39;group&#39;: group,            &#39;open&#39;: 0,            &#39;up&#39;: [up]        }        Vtb.insert(newSetting)    else:        for vtb in setting[&#39;up&#39;]:            if vtb[&#39;aid&#39;] == aid:                return 0        setting[&#39;up&#39;].append(up)        Vtb.update(condition, setting)    return 1# 移除某个订阅def deleteGroupUp(group, aid):    condition = {&#39;group&#39;: group}    setting = Vtb.find_one(condition)    for up in setting[&#39;up&#39;]:        if up[&#39;aid&#39;] == aid:            setting[&#39;up&#39;].remove(up)            Vtb.update(condition, setting)            return 1    return 0# 获取订阅状态def getGroupUp(group):    condition = {&#39;group&#39;: group}    setting = Vtb.find_one(condition)    if setting == None:        return None    setting.pop(&#39;_id&#39;)    return setting# 开启/关闭def setBiliBiliOpen(group, state):    condition = {&#39;group&#39;: group}    setting = Vtb.find_one(condition)    setting[&#39;open&#39;] = int(state)    Vtb.update(condition, setting)</code></pre><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><h5 id="Api-py-1"><a href="#Api-py-1" class="headerlink" title="Api.py"></a>Api.py</h5><pre><code class="python">def getUpInfo(group, aid):    res = requests.get(BASE_API + &#39;/getBiliBiliUpdate/&#39; + str(group) + &#39;/&#39; + aid)    result = res.json()    return result# 获取订阅状态def getGroupUp(group):    res = requests.get(BASE_API + &#39;/getGroupUp/&#39; + str(group))    result = res.json()    return result# 添加订阅def bindGroupUp(group, aid, name):    params = {        &#39;group&#39;: group,        &#39;aid&#39;: aid,        &#39;name&#39;: name    }    res = requests.post(BASE_API + &#39;/bindGroupUp&#39;, data=params)    result = res.json()    return result# 删除订阅def deleteGroupUp(group, aid):    params = {        &#39;group&#39;: group,        &#39;aid&#39;: aid    }    res = requests.post(BASE_API + &#39;/deleteGroupUp&#39;, data=params)    result = res.json()    return result# 设置启用/禁用def setBiliBiliOpen(group, state):    res = requests.get(BASE_API + &#39;/setBiliBiliOpen/&#39; + str(group) + &#39;/&#39; + str(state))    result = res.json()    return result</code></pre><h5 id="HeartUitl-py"><a href="#HeartUitl-py" class="headerlink" title="HeartUitl.py"></a>HeartUitl.py</h5><pre><code class="python">import Apidef getBiliBiliUp(group, aid):    res = Api.getUpInfo(group, aid)    if res[&#39;code&#39;] == 0:        return &#39;&#39;    vlist = res[&#39;data&#39;][&#39;videos&#39;]    over = res[&#39;data&#39;][&#39;over&#39;]    msg = &#39;&#39;    if len(vlist) &gt; 0:        author = vlist[0][&#39;author&#39;]        msg = &#39;\n{}有新的投稿:\n&#39;.format(author)        for video in vlist:            msg += &#39;\n{}\n播放:{}\n时长:{}\n链接:https://www.bilibili.com/video/{}\n&#39;.format(video[&#39;title&#39;], video[&#39;play&#39;], video[&#39;length&#39;], video[&#39;bvid&#39;])        if over &gt; 0:            msg += &#39;\n还有{}条{}的更新，心酱读不完了，前辈还是亲自确认吧\n&#39;.format(over,author)    return msgdef getAllUps(group, needMsg=False):    # 获取订阅列表    res = Api.getGroupUp(group)    if res[&#39;code&#39;] == 0:        if needMsg:            return &#39;该群还没有订阅任何up主，可使用以下命令订阅:\n@+bilibili 订阅 [up主的aid] [自定义名称(可选)]&#39;        else:            return None    if res[&#39;data&#39;][&#39;open&#39;] == 0 and needMsg == False:    # 如果未开启订阅，不再执行        return None    if len(res[&#39;data&#39;][&#39;up&#39;]) == 0:        return &#39;该群还没有订阅任何up主，可使用以下命令订阅:\n@+bilibili 订阅 [up主的aid] [自定义名称(可选)]&#39;    msg = &#39;&#39;    for up in res[&#39;data&#39;][&#39;up&#39;]:        msg += getBiliBiliUp(group, up[&#39;aid&#39;])    if len(msg) &gt; 0:        msg = &#39;前辈关注的up有更新啦~快和心酱一起去看看吧\n&#39; + msg    else:        msg = &#39;前辈关注的up今天没有更新哦~&#39;    return msgdef getGroupUp(group):    res = Api.getGroupUp(group)    data = res[&#39;data&#39;]    if data == None:        return &#39;该群还没有订阅任何up主，可使用以下命令订阅:\n@+bilibili 订阅 [up主的aid] [自定义名称(可选)]&#39;    ups = &#39;&#39;    for up in data[&#39;up&#39;]:        ups += &#39;\n{}&#39;.format(up[&#39;aid&#39;])        if up[&#39;name&#39;] != &#39;&#39;:            ups += &#39;({})&#39;.format(up[&#39;name&#39;])    msg = &#39;&#39;    if len(ups)&gt;0:        msg = &#39;订阅up主列表:&#39; + ups    else:        msg = &#39;该群还没有订阅任何up主，可使用以下命令订阅:\n@+bilibili 订阅 [up主的aid] [自定义名称(可选)]&#39;    if data[&#39;open&#39;] != 1:        msg += &#39;\n该群还未开启每日自动推送哦~可使用 \&#39;@+bilibili 开启\&#39; 命令启动推送&#39;    else:        msg += &#39;\n该群已开启每日推送,可使用 \&#39;@+bilibili 关闭\&#39; 命令停止推送&#39;    return msg# 解析命令def parseUp(msg, option):    info = msg.split(&#39; bilibili {} &#39;.format(option))    if len(info) == 2:        up = info[1].split(&#39; &#39;)        if len(up) == 2 and up[0].isdigit():            return up[0], up[1].strip()        elif len(up) == 1 and up[0].isdigit():            return up[0], &#39;&#39;    return None, None# 订阅def bindGroupUp(group, msg):    aid, name = parseUp(msg, &#39;订阅&#39;)    if aid == None or name == None:        return &#39;输入格式有误，命令格式应为 @+bilibili 订阅 [up主的aid] [自定义名称(可选)]&#39;    res = Api.bindGroupUp(group, aid, name)    if res[&#39;code&#39;] == 1:        return &#39;已成功订阅{}({})&#39;.format(name, aid)    elif res[&#39;code&#39;] == 0:        return &#39;已经订阅过该up主啦，可使用 \&#39;@+bilibili 订阅状态\&#39; 确认列表&#39;# 退订def deleteGroupUp(group, msg):    aid, name = parseUp(msg, &#39;退订&#39;)    res = Api.deleteGroupUp(group, aid)    if res[&#39;code&#39;] == 1:        return &#39;已成功退订({})&#39;.format(aid)    elif res[&#39;code&#39;] == 0:        return &#39;还没有订阅该up主，可使用 \&#39;@+bilibili 订阅状态\&#39; 确认列表&#39;# 设置启用/禁用def setBiliBiliOpen(group, state):    Api.setBiliBiliOpen(group, state)    return &#39;设置成功&#39;</code></pre><h5 id="CQPlusHandler-py-2"><a href="#CQPlusHandler-py-2" class="headerlink" title="CQPlusHandler.py"></a>CQPlusHandler.py</h5><pre><code class="python"># -*- coding:utf-8 -*-import cqplusimport Apiimport HeartUtil# 心酱的QQ号AI_QQ = &#39;xxxxxxxxxx&#39;class MainHandler(cqplus.CQPlusHandler):    def handle_event(self, event, params):        # 收到群消息        if event == &#39;on_group_msg&#39;:            qq = params[&#39;from_qq&#39;]            # 帮助            if params[&#39;msg&#39;] == &#39;[CQ:at,qq={}] help&#39;.format(AI_QQ):                msg = &#39;指令说明：xxxx&#39;                self.api.send_group_msg(params[&#39;from_group&#39;], msg)            # 获取B站订阅更新            elif params[&#39;msg&#39;] == &#39;[CQ:at,qq={}] bilibili&#39;.format(AI_QQ):                msg = HeartUitl.getAllUps(params[&#39;from_group&#39;], needMsg=True)                self.api.send_group_msg(params[&#39;from_group&#39;], msg)            # 获取订阅状态            elif &#39;[CQ:at,qq={}] bilibili 订阅状态&#39;.format(AI_QQ) in params[&#39;msg&#39;]:                msg = HeartUitl.getGroupUp(params[&#39;from_group&#39;])                self.api.send_group_msg(params[&#39;from_group&#39;], msg)            # 订阅up            elif &#39;[CQ:at,qq={}] bilibili 订阅&#39;.format(AI_QQ) in params[&#39;msg&#39;]:                msg = HeartUitl.bindGroupUp(params[&#39;from_group&#39;], params[&#39;msg&#39;])                self.api.send_group_msg(params[&#39;from_group&#39;], msg)            # 退订up            elif &#39;[CQ:at,qq={}] bilibili 退订&#39;.format(AI_QQ) in params[&#39;msg&#39;]:                msg = HeartUitl.deleteGroupUp(params[&#39;from_group&#39;], params[&#39;msg&#39;])                self.api.send_group_msg(params[&#39;from_group&#39;], msg)            # 开启自动推送订阅            elif &#39;[CQ:at,qq={}] bilibili 开启&#39;.format(AI_QQ) in params[&#39;msg&#39;]:                msg = HeartUitl.setBiliBiliOpen(params[&#39;from_group&#39;], 1)                self.api.send_group_msg(params[&#39;from_group&#39;], msg)            # 关闭自动推送订阅            elif &#39;[CQ:at,qq={}] bilibili 关闭&#39;.format(AI_QQ) in params[&#39;msg&#39;]:                msg = HeartUitl.setBiliBiliOpen(params[&#39;from_group&#39;], 0)                self.api.send_group_msg(params[&#39;from_group&#39;], msg)            # 其他艾特心酱的内容视为闲聊            elif &#39;[CQ:at,qq={}]&#39;.format(AI_QQ) in params[&#39;msg&#39;]:                result = Api.chatWithAI(msg=params[&#39;msg&#39;], user=qq)                self.api.send_group_msg(params[&#39;from_group&#39;], &#39;[CQ:at,qq={}] &#39;.format(qq) + result[&#39;text&#39;])</code></pre><p><strong>最终效果如图</strong> <del>(虽然不是心酱)</del>：</p><p><img src="https://ypcdn.105577.xyz/aa8e866888da0c33a5bcfdb81f5e8d6d.png" srcset="/img/loading.gif" alt="alt 设置"></p><p><img src="https://ypcdn.105577.xyz/93d6ccde9b473f58ca12377a9433acfe.png" srcset="/img/loading.gif" alt="alt B站推送"></p><p>本例中未讲到如何设置每日21:00自动推送，这部分内容实现并不困难，可以自行思考或者询问博主，祝大家都有自己的聊天机器人<span style="color: #000;background-color: #000">老婆</span></p><p><br/><br/><br/><br/><br/></p><p><img src="https://ypcdn.105577.xyz/2e039745ab504346c2fd7f4122847050.jpeg" srcset="/img/loading.gif" alt="alt 赤井心"></p>]]></content>
    
    
    
    <tags>
      
      <tag>酷Q</tag>
      
      <tag>python</tag>
      
      <tag>摸鱼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终于搭好了博客</title>
    <link href="undefinedarchives/c3a6abf1.html"/>
    <url>archives/c3a6abf1.html</url>
    
    <content type="html"><![CDATA[<p>终于重新搭好了博客惹<br>……</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>